{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-c7e33347492364427cd8ff8b720cec2b",
            "file": "src/app/store/app.state.ts",
            "type": "interface",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\r\nimport * as book from '../book-store/reducers/book.reducer';\r\nimport { createFeatureSelector } from '@ngrx/store';\r\nexport interface AppState {\r\n    authState: auth.State;\r\n    book: book.State;\r\n}\r\n\r\nexport const reducers = {\r\n    auth: auth.reducer,\r\n    book: book.reducer\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const bookState = createFeatureSelector<AppState>('book');\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "book",
                    "type": "book.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Book",
            "id": "interface-Book-b6b9dc276d0b5cc08771b2989cea8d24",
            "file": "src/app/_models/Book.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\r\n     book: string;\r\n     description: string;\r\n     author: string;\r\n     category: string;\r\n     id?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "book",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BookState",
            "id": "interface-BookState-e92f6ccdccb519039deaa34f444128ad",
            "file": "src/app/book-store/book.state.ts",
            "type": "interface",
            "sourceCode": "import { Book } from '../_models';\r\nexport interface BookState {\r\n    readonly books: Book[];\r\n}\r\n",
            "properties": [
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-c261f3d32558ded27369a660b2e34b0a",
            "file": "src/app/book-store/reducers/book.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Book } from '../../_models';\r\nimport {\r\n\r\n  BookActions, ADD_BOOK, GET_BOOKS,\r\n  DELETE_BOOKS, UPDATE_BOOKS, GetBooks,\r\n  LoadDataSuccess, AddBookSuccess, AddBook,\r\n  DeleteBooks, UpdateBook, UpdateBookSuccess, DeleteBookSuccess,\r\n  DATA_LOAD, ADD_BOOK_SUCCESS,\r\n  UPDATE_BOOK_SUCCESS, DELETE_BOOK_SUCCESS\r\n} from '../actions/book.actions';\r\n\r\nexport interface State {\r\n  book: Book[];\r\n  success: boolean | null;\r\n  message: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  book: [],\r\n  message: null,\r\n  success: null\r\n};\r\nexport function reducer(state: State = initialState, action: BookActions): State {\r\n    switch (action.type) {\r\n        case ADD_BOOK: {\r\n        return {\r\n          ...state\r\n        };\r\n        }\r\n        case GET_BOOKS: {\r\n            return {\r\n              ...state,\r\n            };\r\n      }\r\n        case DELETE_BOOKS: {\r\n            return {\r\n                    ...state\r\n            };\r\n        }\r\n      case UPDATE_BOOKS: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case DATA_LOAD: {\r\n        return {\r\n          book: action.payload,\r\n          message: null,\r\n          success: null\r\n        };\r\n      }\r\n      case ADD_BOOK_SUCCESS: {\r\n        return {\r\n          book: [...state.book, action.payload],\r\n          message: 'Book is added successfully!',\r\n          success: true\r\n        };\r\n      }\r\n        case UPDATE_BOOK_SUCCESS: {\r\n          return {\r\n            ...state,\r\n            message: 'Book is updated successfully!',\r\n            success: true\r\n          };\r\n      }\r\n      case DELETE_BOOK_SUCCESS: {\r\n        return {\r\n          ...state\r\n        };\r\n        }\r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n",
            "properties": [
                {
                    "name": "book",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "message",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "success",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-9d7c1c5fd919b3e0fd6165e0ab1c2821-1",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User } from '../../_models';\r\nimport { AuthActionTypes, AuthAction } from '../actions/user.actions';\r\n\r\nexport interface State {\r\n    isAuthenticated: boolean;\r\n    user: User | null;\r\n    errorMessage: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n    isAuthenticated: false,\r\n    user: null,\r\n    errorMessage: null\r\n};\r\nexport function reducer(state = initialState, action: AuthAction): State {\r\n    switch (action.type) {\r\n      case AuthActionTypes.LOGIN_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          user: {\r\n              email: action.payload.email,\r\n              password: action.payload.password\r\n          },\r\n          errorMessage: null\r\n        };\r\n        }\r\n        case AuthActionTypes.LOGIN_FAILURE: {\r\n            return {\r\n                ...state,\r\n                errorMessage: 'Incorrect email and/or password.'\r\n            };\r\n      }\r\n      case AuthActionTypes.SIGNUP_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          user: action.payload,\r\n          errorMessage: null\r\n        };\r\n      }\r\n      case AuthActionTypes.SIGNUP_FAILURE: {\r\n        return {\r\n          ...state,\r\n          errorMessage: 'That email is already in use.'\r\n        };\r\n      }\r\n      case AuthActionTypes.LOGOUT: {\r\n        return initialState;\r\n        }\r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "User",
            "id": "interface-User-5172ca06c516832622f10b16859c25b0",
            "file": "src/app/_models/User.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    id?: number;\r\n    name?: string;\r\n    email: string;\r\n    password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-77325063e07eabcffa7bf2382a6851f9",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN),\r\n        map((action: LogIn) => action.payload),\r\n        switchMap(payload => {\r\n            return this.authService.login(payload).pipe(\r\n                map((user) => {\r\n                    if ( user.length > 0) {\r\n                    return new LogInSuccess({ email: payload.email });\r\n                    } else {\r\n                        return new LogInFailure({ error: 'Invalid credentials' });\r\n                    }\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_FAILURE),\r\n        tap((err) => {\r\n            this.authService.errorMessage = err.payload.error;\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n            ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n            tap((user) => {\r\n              localStorage.setItem('user', JSON.stringify(user.payload));\r\n              this.router.navigateByUrl('/');\r\n            })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "Logout",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap((user) => {\r\n            localStorage.removeItem('user');\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP),\r\n        map((action: SignUp) => action.payload),\r\n        switchMap(payload => {\r\n            return this.authService.signUp(payload).pipe(\r\n                map((data) => {\r\n                    return new SignUpSuccess(data);\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpFailure",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n        tap((user) => {\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "<p>TODO: Combine signupFailure and login failure to create a single effect</p>\n",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n        tap((user) => {\r\n        localStorage.setItem('user', user.payload);\r\n        this.router.navigateByUrl('/');\r\n        })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport {\r\n    AuthActionTypes,\r\n    LogIn,\r\n    LogInFailure,\r\n    LogInSuccess,\r\n    SignUp,\r\n    SignUpSuccess\r\n} from '../actions/user.actions';\r\n\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n    /**\r\n     *\r\n     */\r\n    constructor(\r\n    private actions: Actions,\r\n    private authService: AuthService,\r\n    private router: Router) { }\r\n          @Effect({ dispatch: false })\r\n          LogInSuccess: Observable<any> = this.actions.pipe(\r\n            ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n            tap((user) => {\r\n              localStorage.setItem('user', JSON.stringify(user.payload));\r\n              this.router.navigateByUrl('/');\r\n            })\r\n    );\r\n\r\n    @Effect({ dispatch: false })\r\n    LogInFailure: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_FAILURE),\r\n        tap((err) => {\r\n            this.authService.errorMessage = err.payload.error;\r\n        })\r\n    );\r\n\r\n    @Effect()\r\n    LogIn: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN),\r\n        map((action: LogIn) => action.payload),\r\n        switchMap(payload => {\r\n            return this.authService.login(payload).pipe(\r\n                map((user) => {\r\n                    if ( user.length > 0) {\r\n                    return new LogInSuccess({ email: payload.email });\r\n                    } else {\r\n                        return new LogInFailure({ error: 'Invalid credentials' });\r\n                    }\r\n                }));\r\n        }));\r\n\r\n    @Effect({dispatch: false})\r\n    SignUpSuccess: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n        tap((user) => {\r\n        localStorage.setItem('user', user.payload);\r\n        this.router.navigateByUrl('/');\r\n        })\r\n    );\r\n    /**\r\n     * TODO: Combine signupFailure and login failure to create a single effect\r\n     */\r\n    @Effect({dispatch: false})\r\n    SignUpFailure: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n        tap((user) => {\r\n        })\r\n    );\r\n    @Effect()\r\n    SignUp: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP),\r\n        map((action: SignUp) => action.payload),\r\n        switchMap(payload => {\r\n            return this.authService.signUp(payload).pipe(\r\n                map((data) => {\r\n                    return new SignUpSuccess(data);\r\n                }));\r\n        }));\r\n\r\n    @Effect({dispatch: false})\r\n    Logout: Observable<any> = this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap((user) => {\r\n            localStorage.removeItem('user');\r\n        })\r\n    );\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-7a68672773ed33b3d0a30223896fef88",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "errMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../_models';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { environment } from '../../environments/environment';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private errMessage: string;\r\n  get errorMessage(): string {\r\n    return this.errMessage;\r\n  }\r\n  set errorMessage(message: string) {\r\n    this.errMessage = message;\r\n  }\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.errorMessage = '';\r\n   }\r\n\r\n  login(user: User): Observable<User[]>{\r\n    const loginUrl = encodeURI('users?email=' + user.email + '&password=' + user.password);\r\n    return this.http.get<User[]>(`${environment.apiUrl}` + loginUrl);\r\n  }\r\n\r\n  signUp(user: User): Observable<User> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json'\r\n      })\r\n    };\r\n    const signUpUrl = encodeURI('users');\r\n    return this.http.post<User>(`${environment.apiUrl}` + signUpUrl, user, httpOptions);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "setSignature": {
                        "name": "errorMessage",
                        "type": "void",
                        "args": [
                            {
                                "name": "message",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "message",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "string",
                        "returnType": "string",
                        "line": 13
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "BookEffects",
            "id": "injectable-BookEffects-6812a8cbe1cb932f07a63bd93da61bd7",
            "file": "src/app/book-store/effects/book.effects.ts",
            "properties": [
                {
                    "name": "CreateBooks",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(ADD_BOOK),\r\n        map((action: AddBook) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.booksService.createBook(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        return new AddBookSuccess(data);\r\n                    }\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeleteBook",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(DELETE_BOOKS),\r\n        map((action: DeleteBooks) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.booksService.deleteBook(payload).pipe(\r\n                map((data) => {\r\n                    return new DeleteBookSuccess();\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "GetBooks",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(GET_BOOKS),\r\n        map((action: GetBooks) => action),\r\n        mergeMap(payload => {\r\n            return this.booksService.getAllBooks().pipe(\r\n                map((data) => {\r\n                    return new LoadDataSuccess(data);\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateBooks",
                    "defaultValue": "this.actions.pipe(\r\n        ofType(UPDATE_BOOKS),\r\n        map((action: UpdateBook) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.booksService.updateBook(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        return new UpdateBookSuccess(data);\r\n                    }\r\n                }));\r\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BooksService } from '../../services/books.service';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\nimport { map, switchMap, tap, mergeMap, take, pluck } from 'rxjs/operators';\r\nimport {\r\n    BookActions, ADD_BOOK, GET_BOOKS,\r\n    DELETE_BOOKS, UPDATE_BOOKS, GetBooks,\r\n    LoadDataSuccess, AddBookSuccess, AddBook,\r\n    DeleteBooks, UpdateBook, UpdateBookSuccess, DeleteBookSuccess\r\n} from '../actions/book.actions';\r\nimport { Book } from '../../_models';\r\nimport { ClassGetter } from '@angular/compiler/src/output/output_ast';\r\n\r\n@Injectable()\r\nexport class BookEffects {\r\n    constructor(private booksService: BooksService, private actions: Actions) {\r\n    }\r\n    @Effect({ dispatch: true })\r\n    GetBooks: Observable<any> = this.actions.pipe(\r\n        ofType(GET_BOOKS),\r\n        map((action: GetBooks) => action),\r\n        mergeMap(payload => {\r\n            return this.booksService.getAllBooks().pipe(\r\n                map((data) => {\r\n                    return new LoadDataSuccess(data);\r\n                }));\r\n        }));\r\n\r\n    @Effect({ dispatch: true })\r\n    CreateBooks: Observable<any> = this.actions.pipe(\r\n        ofType(ADD_BOOK),\r\n        map((action: AddBook) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.booksService.createBook(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        return new AddBookSuccess(data);\r\n                    }\r\n                }));\r\n        }));\r\n    @Effect({ dispatch: true })\r\n    DeleteBook: Observable<any> = this.actions.pipe(\r\n        ofType(DELETE_BOOKS),\r\n        map((action: DeleteBooks) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.booksService.deleteBook(payload).pipe(\r\n                map((data) => {\r\n                    return new DeleteBookSuccess();\r\n                }));\r\n        }));\r\n    @Effect({ dispatch: true })\r\n    UpdateBooks: Observable<any> = this.actions.pipe(\r\n        ofType(UPDATE_BOOKS),\r\n        map((action: UpdateBook) => action.payload),\r\n        mergeMap(payload => {\r\n            return this.booksService.updateBook(payload).pipe(\r\n                map((data) => {\r\n                    if (data) {\r\n                        return new UpdateBookSuccess(data);\r\n                    }\r\n                }));\r\n        }));\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "booksService",
                        "type": "BooksService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BooksService",
            "id": "injectable-BooksService-bfd315879eb2ff7b0f2053ad20b218fa",
            "file": "src/app/services/books.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "'http://localhost:3000/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "createBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorCatcher",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Book[]>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getByBookId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBook",
                    "args": [
                        {
                            "name": "updatedBook",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "updatedBook",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Book } from '../_models';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { retry, catchError } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BooksService {\r\n  readonly BASE_URL = 'http://localhost:3000/';\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getAllBooks(): Observable<Book[]> {\r\n    const getAllBooksUrl = encodeURI('books');\r\n    return this.http\r\n      .get<Book[]>(`${this.BASE_URL + getAllBooksUrl}`)\r\n      .pipe(retry(1), catchError(this.errorCatcher));\r\n  }\r\n\r\n  public createBook(book: Book): Observable<Book> {\r\n    const createUrl = encodeURI('books');\r\n    return this.http\r\n      .post<Book>(`${this.BASE_URL + createUrl}`, book, this.httpOptions)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public updateBook(updatedBook: Book): Observable<Book> {\r\n    const updateBookUrl = encodeURI(`books/${updatedBook.id}`);\r\n    return this.http\r\n      .patch<Book>(\r\n        `${this.BASE_URL + updateBookUrl}`,\r\n        updatedBook,\r\n        this.httpOptions\r\n      )\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public getByBookId(id: number): Observable<Book> {\r\n    return this.http\r\n      .get<Book>(this.BASE_URL + 'books/' + id)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public deleteBook(id: number): Observable<Book> {\r\n    const deleteBookUrl = encodeURI(`books/${id}`);\r\n    return this.http\r\n      .delete<Book>(`${this.BASE_URL + deleteBookUrl}`)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  errorCatcher(error): Observable<never> {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddBook",
            "id": "class-AddBook-f756573aed6c82d71ca92ac49e8a9ea5",
            "file": "src/app/book-store/actions/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from '../../_models';\r\n\r\n\r\nexport const ADD_BOOK = '[Book] ADD';\r\nexport const GET_BOOKS = '[Book] GET';\r\nexport const DELETE_BOOKS = '[Book] DELETE';\r\nexport const UPDATE_BOOKS = '[Book] UPDATE';\r\nexport const DATA_LOAD = '[Book] LOAD';\r\nexport const ADD_BOOK_SUCCESS = '[Book] ADD Book SUCCESS';\r\nexport const UPDATE_BOOK_SUCCESS = '[Book] UPDATE Book SUCCESS';\r\nexport const DELETE_BOOK_SUCCESS = '[Book] DELETE Book SUCCESS';\r\n\r\nexport class AddBook implements Action {\r\n    readonly type = ADD_BOOK;\r\n    constructor(public payload: Book) {\r\n    }\r\n}\r\nexport class GetBooks implements Action {\r\n    readonly type = GET_BOOKS;\r\n    constructor() {}\r\n}\r\nexport class DeleteBooks implements Action {\r\n    readonly type = DELETE_BOOKS;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateBook implements Action {\r\n    readonly type = UPDATE_BOOKS;\r\n    constructor(public payload: Book) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Book[]) {}\r\n}\r\nexport class AddBookSuccess implements Action {\r\n    readonly type = ADD_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class UpdateBookSuccess implements Action {\r\n    readonly type = UPDATE_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class DeleteBookSuccess implements Action {\r\n    readonly type = DELETE_BOOK_SUCCESS;\r\n  }\r\nexport type BookActions = AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess\r\n | UpdateBookSuccess | DeleteBookSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_BOOK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddBookSuccess",
            "id": "class-AddBookSuccess-f756573aed6c82d71ca92ac49e8a9ea5",
            "file": "src/app/book-store/actions/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from '../../_models';\r\n\r\n\r\nexport const ADD_BOOK = '[Book] ADD';\r\nexport const GET_BOOKS = '[Book] GET';\r\nexport const DELETE_BOOKS = '[Book] DELETE';\r\nexport const UPDATE_BOOKS = '[Book] UPDATE';\r\nexport const DATA_LOAD = '[Book] LOAD';\r\nexport const ADD_BOOK_SUCCESS = '[Book] ADD Book SUCCESS';\r\nexport const UPDATE_BOOK_SUCCESS = '[Book] UPDATE Book SUCCESS';\r\nexport const DELETE_BOOK_SUCCESS = '[Book] DELETE Book SUCCESS';\r\n\r\nexport class AddBook implements Action {\r\n    readonly type = ADD_BOOK;\r\n    constructor(public payload: Book) {\r\n    }\r\n}\r\nexport class GetBooks implements Action {\r\n    readonly type = GET_BOOKS;\r\n    constructor() {}\r\n}\r\nexport class DeleteBooks implements Action {\r\n    readonly type = DELETE_BOOKS;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateBook implements Action {\r\n    readonly type = UPDATE_BOOKS;\r\n    constructor(public payload: Book) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Book[]) {}\r\n}\r\nexport class AddBookSuccess implements Action {\r\n    readonly type = ADD_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class UpdateBookSuccess implements Action {\r\n    readonly type = UPDATE_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class DeleteBookSuccess implements Action {\r\n    readonly type = DELETE_BOOK_SUCCESS;\r\n  }\r\nexport type BookActions = AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess\r\n | UpdateBookSuccess | DeleteBookSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_BOOK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteBooks",
            "id": "class-DeleteBooks-f756573aed6c82d71ca92ac49e8a9ea5",
            "file": "src/app/book-store/actions/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from '../../_models';\r\n\r\n\r\nexport const ADD_BOOK = '[Book] ADD';\r\nexport const GET_BOOKS = '[Book] GET';\r\nexport const DELETE_BOOKS = '[Book] DELETE';\r\nexport const UPDATE_BOOKS = '[Book] UPDATE';\r\nexport const DATA_LOAD = '[Book] LOAD';\r\nexport const ADD_BOOK_SUCCESS = '[Book] ADD Book SUCCESS';\r\nexport const UPDATE_BOOK_SUCCESS = '[Book] UPDATE Book SUCCESS';\r\nexport const DELETE_BOOK_SUCCESS = '[Book] DELETE Book SUCCESS';\r\n\r\nexport class AddBook implements Action {\r\n    readonly type = ADD_BOOK;\r\n    constructor(public payload: Book) {\r\n    }\r\n}\r\nexport class GetBooks implements Action {\r\n    readonly type = GET_BOOKS;\r\n    constructor() {}\r\n}\r\nexport class DeleteBooks implements Action {\r\n    readonly type = DELETE_BOOKS;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateBook implements Action {\r\n    readonly type = UPDATE_BOOKS;\r\n    constructor(public payload: Book) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Book[]) {}\r\n}\r\nexport class AddBookSuccess implements Action {\r\n    readonly type = ADD_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class UpdateBookSuccess implements Action {\r\n    readonly type = UPDATE_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class DeleteBookSuccess implements Action {\r\n    readonly type = DELETE_BOOK_SUCCESS;\r\n  }\r\nexport type BookActions = AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess\r\n | UpdateBookSuccess | DeleteBookSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_BOOKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteBookSuccess",
            "id": "class-DeleteBookSuccess-f756573aed6c82d71ca92ac49e8a9ea5",
            "file": "src/app/book-store/actions/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from '../../_models';\r\n\r\n\r\nexport const ADD_BOOK = '[Book] ADD';\r\nexport const GET_BOOKS = '[Book] GET';\r\nexport const DELETE_BOOKS = '[Book] DELETE';\r\nexport const UPDATE_BOOKS = '[Book] UPDATE';\r\nexport const DATA_LOAD = '[Book] LOAD';\r\nexport const ADD_BOOK_SUCCESS = '[Book] ADD Book SUCCESS';\r\nexport const UPDATE_BOOK_SUCCESS = '[Book] UPDATE Book SUCCESS';\r\nexport const DELETE_BOOK_SUCCESS = '[Book] DELETE Book SUCCESS';\r\n\r\nexport class AddBook implements Action {\r\n    readonly type = ADD_BOOK;\r\n    constructor(public payload: Book) {\r\n    }\r\n}\r\nexport class GetBooks implements Action {\r\n    readonly type = GET_BOOKS;\r\n    constructor() {}\r\n}\r\nexport class DeleteBooks implements Action {\r\n    readonly type = DELETE_BOOKS;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateBook implements Action {\r\n    readonly type = UPDATE_BOOKS;\r\n    constructor(public payload: Book) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Book[]) {}\r\n}\r\nexport class AddBookSuccess implements Action {\r\n    readonly type = ADD_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class UpdateBookSuccess implements Action {\r\n    readonly type = UPDATE_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class DeleteBookSuccess implements Action {\r\n    readonly type = DELETE_BOOK_SUCCESS;\r\n  }\r\nexport type BookActions = AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess\r\n | UpdateBookSuccess | DeleteBookSuccess;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_BOOK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetBooks",
            "id": "class-GetBooks-f756573aed6c82d71ca92ac49e8a9ea5",
            "file": "src/app/book-store/actions/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from '../../_models';\r\n\r\n\r\nexport const ADD_BOOK = '[Book] ADD';\r\nexport const GET_BOOKS = '[Book] GET';\r\nexport const DELETE_BOOKS = '[Book] DELETE';\r\nexport const UPDATE_BOOKS = '[Book] UPDATE';\r\nexport const DATA_LOAD = '[Book] LOAD';\r\nexport const ADD_BOOK_SUCCESS = '[Book] ADD Book SUCCESS';\r\nexport const UPDATE_BOOK_SUCCESS = '[Book] UPDATE Book SUCCESS';\r\nexport const DELETE_BOOK_SUCCESS = '[Book] DELETE Book SUCCESS';\r\n\r\nexport class AddBook implements Action {\r\n    readonly type = ADD_BOOK;\r\n    constructor(public payload: Book) {\r\n    }\r\n}\r\nexport class GetBooks implements Action {\r\n    readonly type = GET_BOOKS;\r\n    constructor() {}\r\n}\r\nexport class DeleteBooks implements Action {\r\n    readonly type = DELETE_BOOKS;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateBook implements Action {\r\n    readonly type = UPDATE_BOOKS;\r\n    constructor(public payload: Book) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Book[]) {}\r\n}\r\nexport class AddBookSuccess implements Action {\r\n    readonly type = ADD_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class UpdateBookSuccess implements Action {\r\n    readonly type = UPDATE_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class DeleteBookSuccess implements Action {\r\n    readonly type = DELETE_BOOK_SUCCESS;\r\n  }\r\nexport type BookActions = AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess\r\n | UpdateBookSuccess | DeleteBookSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "GET_BOOKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadDataSuccess",
            "id": "class-LoadDataSuccess-f756573aed6c82d71ca92ac49e8a9ea5",
            "file": "src/app/book-store/actions/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from '../../_models';\r\n\r\n\r\nexport const ADD_BOOK = '[Book] ADD';\r\nexport const GET_BOOKS = '[Book] GET';\r\nexport const DELETE_BOOKS = '[Book] DELETE';\r\nexport const UPDATE_BOOKS = '[Book] UPDATE';\r\nexport const DATA_LOAD = '[Book] LOAD';\r\nexport const ADD_BOOK_SUCCESS = '[Book] ADD Book SUCCESS';\r\nexport const UPDATE_BOOK_SUCCESS = '[Book] UPDATE Book SUCCESS';\r\nexport const DELETE_BOOK_SUCCESS = '[Book] DELETE Book SUCCESS';\r\n\r\nexport class AddBook implements Action {\r\n    readonly type = ADD_BOOK;\r\n    constructor(public payload: Book) {\r\n    }\r\n}\r\nexport class GetBooks implements Action {\r\n    readonly type = GET_BOOKS;\r\n    constructor() {}\r\n}\r\nexport class DeleteBooks implements Action {\r\n    readonly type = DELETE_BOOKS;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateBook implements Action {\r\n    readonly type = UPDATE_BOOKS;\r\n    constructor(public payload: Book) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Book[]) {}\r\n}\r\nexport class AddBookSuccess implements Action {\r\n    readonly type = ADD_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class UpdateBookSuccess implements Action {\r\n    readonly type = UPDATE_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class DeleteBookSuccess implements Action {\r\n    readonly type = DELETE_BOOK_SUCCESS;\r\n  }\r\nexport type BookActions = AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess\r\n | UpdateBookSuccess | DeleteBookSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book[]"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DATA_LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-0acde3db3a5bc669e92fbb3562f0e713",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../_models';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-0acde3db3a5bc669e92fbb3562f0e713",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../_models';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-0acde3db3a5bc669e92fbb3562f0e713",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../_models';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Logout",
            "id": "class-Logout-0acde3db3a5bc669e92fbb3562f0e713",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../_models';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-0acde3db3a5bc669e92fbb3562f0e713",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../_models';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-0acde3db3a5bc669e92fbb3562f0e713",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../_models';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-0acde3db3a5bc669e92fbb3562f0e713",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../_models';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateBook",
            "id": "class-UpdateBook-f756573aed6c82d71ca92ac49e8a9ea5",
            "file": "src/app/book-store/actions/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from '../../_models';\r\n\r\n\r\nexport const ADD_BOOK = '[Book] ADD';\r\nexport const GET_BOOKS = '[Book] GET';\r\nexport const DELETE_BOOKS = '[Book] DELETE';\r\nexport const UPDATE_BOOKS = '[Book] UPDATE';\r\nexport const DATA_LOAD = '[Book] LOAD';\r\nexport const ADD_BOOK_SUCCESS = '[Book] ADD Book SUCCESS';\r\nexport const UPDATE_BOOK_SUCCESS = '[Book] UPDATE Book SUCCESS';\r\nexport const DELETE_BOOK_SUCCESS = '[Book] DELETE Book SUCCESS';\r\n\r\nexport class AddBook implements Action {\r\n    readonly type = ADD_BOOK;\r\n    constructor(public payload: Book) {\r\n    }\r\n}\r\nexport class GetBooks implements Action {\r\n    readonly type = GET_BOOKS;\r\n    constructor() {}\r\n}\r\nexport class DeleteBooks implements Action {\r\n    readonly type = DELETE_BOOKS;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateBook implements Action {\r\n    readonly type = UPDATE_BOOKS;\r\n    constructor(public payload: Book) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Book[]) {}\r\n}\r\nexport class AddBookSuccess implements Action {\r\n    readonly type = ADD_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class UpdateBookSuccess implements Action {\r\n    readonly type = UPDATE_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class DeleteBookSuccess implements Action {\r\n    readonly type = DELETE_BOOK_SUCCESS;\r\n  }\r\nexport type BookActions = AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess\r\n | UpdateBookSuccess | DeleteBookSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_BOOKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateBookSuccess",
            "id": "class-UpdateBookSuccess-f756573aed6c82d71ca92ac49e8a9ea5",
            "file": "src/app/book-store/actions/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from '../../_models';\r\n\r\n\r\nexport const ADD_BOOK = '[Book] ADD';\r\nexport const GET_BOOKS = '[Book] GET';\r\nexport const DELETE_BOOKS = '[Book] DELETE';\r\nexport const UPDATE_BOOKS = '[Book] UPDATE';\r\nexport const DATA_LOAD = '[Book] LOAD';\r\nexport const ADD_BOOK_SUCCESS = '[Book] ADD Book SUCCESS';\r\nexport const UPDATE_BOOK_SUCCESS = '[Book] UPDATE Book SUCCESS';\r\nexport const DELETE_BOOK_SUCCESS = '[Book] DELETE Book SUCCESS';\r\n\r\nexport class AddBook implements Action {\r\n    readonly type = ADD_BOOK;\r\n    constructor(public payload: Book) {\r\n    }\r\n}\r\nexport class GetBooks implements Action {\r\n    readonly type = GET_BOOKS;\r\n    constructor() {}\r\n}\r\nexport class DeleteBooks implements Action {\r\n    readonly type = DELETE_BOOKS;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateBook implements Action {\r\n    readonly type = UPDATE_BOOKS;\r\n    constructor(public payload: Book) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Book[]) {}\r\n}\r\nexport class AddBookSuccess implements Action {\r\n    readonly type = ADD_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class UpdateBookSuccess implements Action {\r\n    readonly type = UPDATE_BOOK_SUCCESS;\r\n    constructor(public payload: Book) {}\r\n}\r\nexport class DeleteBookSuccess implements Action {\r\n    readonly type = DELETE_BOOK_SUCCESS;\r\n  }\r\nexport type BookActions = AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess\r\n | UpdateBookSuccess | DeleteBookSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_BOOK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d140538924cd57bc3d0b7f55f163191d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Books-collection'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'Books-collection';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\r\n    <app-header></app-header>\r\n    <router-outlet></router-outlet>\r\n</div>"
        },
        {
            "name": "BooksListComponent",
            "id": "component-BooksListComponent-a293ecd97c57a20351f5fc52ae5ac13b",
            "file": "src/app/books-list/books-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-books-list",
            "styleUrls": [
                "./books-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./books-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "userAuthenticated",
                    "line": 18,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bookList",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "bookToUpdate",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "createBook",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "displayMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "bookCreated",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "bookNotCreated",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "createBookForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deleteBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAllBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "updateBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Book } from '../_models';\r\nimport { Observable } from 'rxjs';\r\nimport { BooksService } from '../services/books.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState, bookState } from '../store/app.state';\r\nimport { GetBooks, DeleteBooks } from '../book-store/actions/book.actions';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-books-list',\r\n  templateUrl: './books-list.component.html',\r\n  styleUrls: ['./books-list.component.scss'],\r\n})\r\nexport class BooksListComponent implements OnInit {\r\n  bookList: Book[];\r\n  createBook: boolean;\r\n  @Input() userAuthenticated: boolean;\r\n  displayMessage: string;\r\n  bookToUpdate: Book;\r\n  getState: Observable<any>;\r\n\r\n  constructor(private router: Router, private store: Store<AppState>) {\r\n    this.getState = this.store.select(bookState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadAllBooks();\r\n    this.createBook = false;\r\n    this.store.subscribe((data) => {\r\n      this.bookList = data.book.book;\r\n    });\r\n  }\r\n\r\n  private loadAllBooks(): void {\r\n    this.store.dispatch(new GetBooks());\r\n  }\r\n\r\n  public deleteBook(id: number): void {\r\n    this.store.dispatch(new DeleteBooks(id));\r\n    this.store.dispatch(new GetBooks());\r\n  }\r\n\r\n  public bookCreated(event): void {\r\n    this.displayMessage = event;\r\n    this.loadAllBooks();\r\n  }\r\n\r\n  public bookNotCreated(event): void {\r\n    this.displayMessage = event;\r\n  }\r\n\r\n  public createBookForm(): void {\r\n    this.router.navigateByUrl('create');\r\n  }\r\n\r\n  public updateBook(book: Book): void {\r\n    this.router.navigateByUrl('update/' + book.id);\r\n  }\r\n\r\n  public closeNotification(): void {\r\n    this.displayMessage = undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table,\r\nthead {\r\n    border: 1px solid lightgrey;\r\n    text-align: center;\r\n}\r\n\r\ntable {\r\n    thead {\r\n        tr {\r\n            .actions {\r\n                min-width: 10rem;\r\n            }\r\n        }\r\n    }\r\n    tbody {\r\n        tr {\r\n            .actions-buttons {\r\n                padding: 0.5rem;\r\n                .update {\r\n                    margin-left: 0.5rem;\r\n                }\r\n            }\r\n            &:nth-child(even) {\r\n                background-color: #f2f2f2;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.notification {\r\n    text-align: center;\r\n    padding: 2rem;\r\n    &.success {\r\n        background-color: green;\r\n    }\r\n    &.error {\r\n        background-color: tomato;\r\n    }\r\n}\r\n\r\n.btn-margin {\r\n    margin-left: 5px;\r\n}\r\n\r\ntd, th {\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n  }\r\n\r\n.float-right {\r\n    float: right;\r\n    margin-right: 5px;\r\n}  ",
                    "styleUrl": "./books-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"add\" class=\"float-right\">\r\n    <button aria-label=\"Add new book\" style=\"margin: auto;\" type=\"button\" class=\"add-button\" *ngIf=\"userAuthenticated\" \r\n    (click)=\"createBookForm()\">Add New Book</button>\r\n</div>\r\n\r\n<div class=\"list\">\r\n    <table style=\"width:100%\">\r\n        <caption>\r\n            <div>\r\n                <h2 class=\"heading\">Visit the Collection of Books</h2>\r\n            </div>\r\n        </caption>\r\n        <thead>\r\n            <tr>\r\n                <th style=\"width: 10%\">Sr. No.</th>\r\n                <th style=\"width: 20%\">Book Title</th>\r\n                <th style=\"width: 20%\">Author</th>\r\n                <th style=\"width: 20%\">Short Description</th>\r\n                <th style=\"width: 10%\">Category</th>\r\n                <th style=\"width: 20%\" *ngIf=\"userAuthenticated\">Action</th>\r\n            </tr>\r\n        </thead>\r\n        \r\n        <tbody>\r\n            <tr *ngFor=\"let book of bookList\">\r\n                <td tabindex=\"0\" style=\"width: 10%\">{{book.id}}</td>\r\n                <td tabindex=\"0\" style=\"width: 20%\">{{book.book}}</td>\r\n                <td tabindex=\"0\" style=\"width: 20%\">{{book.author}}</td>\r\n                <td tabindex=\"0\" style=\"width: 20%\">{{book.description}}</td>\r\n                <td tabindex=\"0\" style=\"width: 10%\">{{book.category}}</td>\r\n                <td style=\"white-space: nowrap; width: 20%\" class=\"actions-buttons\" *ngIf=\"userAuthenticated\">\r\n                    <!-- <a routerLink=\"edit/{{book.id}}\" class=\"btn btn-sm btn-primary mr-1\">Edit</a> -->\r\n                    <button tabindex=\"0\" aria-label=\"Update Book\" class=\"secondary-button update\" \r\n                    (click)=\"updateBook(book)\">Update</button>\r\n                    \r\n                    <button tabindex=\"0\" aria-label=\"Delete Book\" class=\"accent-button delete btn-margin\" \r\n                    (click)=\"deleteBook(book.id)\">Delete</button>\r\n                </td>\r\n            </tr>\r\n           \r\n            <div class=\"notification\" *ngIf=\"displayMessage\">\r\n                <span>{{displayMessage}}</span>\r\n                <button aria-label=\"Close\" (click)=\"closeNotification()\">Close</button>\r\n            </div>\r\n            \r\n            <div *ngIf=\"createBook\">\r\n                <app-add-book [existingBook]=\"bookToUpdate\" (bookCreatedSuccessfully)=\"bookCreated($event)\" (errorInBookCreation)=\"bookNotCreated($event)\"></app-add-book>\r\n            </div>\r\n        </tbody>\r\n    </table>\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CreateBookComponent",
            "id": "component-CreateBookComponent-7f3f960abc22496cf30c138407c12cb2",
            "file": "src/app/add-book/add-book.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-book",
            "styleUrls": [
                "./add-book.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-book.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "existingBook",
                    "line": 22,
                    "type": "Book"
                }
            ],
            "outputsClass": [
                {
                    "name": "booksCreatedSuccessfully",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "errorInBookCreation",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "bookId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "createBookForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "displayUpdate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "newBook",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "submitted",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "createOrUpdateBook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "initializeCreateBookForm",
                    "args": [
                        {
                            "name": "existingBook",
                            "type": "Book",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "existingBook",
                            "type": "Book",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\r\nimport { Book } from '../_models';\r\nimport { BooksService } from '../services/books.service';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState, bookState } from '../store/app.state';\r\nimport {\r\n  AddBook,\r\n  GetBooks,\r\n  UpdateBook,\r\n} from '../book-store/actions/book.actions';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-add-book',\r\n  templateUrl: './add-book.component.html',\r\n  styleUrls: ['./add-book.component.scss'],\r\n})\r\nexport class CreateBookComponent implements OnInit {\r\n  @Input() existingBook?: Book;\r\n  displayUpdate: boolean;\r\n  newBook: Book;\r\n  submitted: false;\r\n  createBookForm: FormGroup;\r\n  getState: Observable<any>;\r\n  @Output() booksCreatedSuccessfully = new EventEmitter<string>();\r\n  @Output() errorInBookCreation = new EventEmitter<string>();\r\n  bookId: number;\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private store: Store<AppState>,\r\n    private router: Router,\r\n    private booksService: BooksService\r\n  ) {\r\n    this.getState = this.store.select(bookState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.route.snapshot.params && this.route.snapshot.params.id) {\r\n      this.bookId = this.route.snapshot.params.id;\r\n      this.booksService.getByBookId(this.bookId).subscribe((data: Book) => {\r\n        this.existingBook = data;\r\n        this.initializeCreateBookForm(this.existingBook);\r\n      });\r\n    }\r\n    this.initializeCreateBookForm(this.existingBook);\r\n\r\n    // after dispatching the create book action, dispatch the load books action in the effects itself\r\n    this.store.subscribe((data) => {\r\n      if (data) {\r\n        if (data.book.success) {\r\n          this.createBookForm.reset();\r\n        }\r\n      }\r\n      this.route.data.subscribe((params) => {\r\n        if (params && params.isUpdate) {\r\n          this.displayUpdate = params.isUpdate;\r\n        } else {\r\n          this.displayUpdate = false;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private initializeCreateBookForm(existingBook?: Book): void {\r\n    if (existingBook) {\r\n      this.createBookForm = new FormGroup({\r\n        book: new FormControl(existingBook.book, Validators.required),\r\n        description: new FormControl(existingBook.description),\r\n        author: new FormControl(existingBook.author, Validators.required),\r\n        category: new FormControl(existingBook.category, Validators.required),\r\n      });\r\n    } else {\r\n      this.createBookForm = new FormGroup({\r\n        book: new FormControl('', Validators.required),\r\n        description: new FormControl(''),\r\n        author: new FormControl('', Validators.required),\r\n        category: new FormControl('', Validators.required),\r\n      });\r\n    }\r\n  }\r\n  get book(): string {\r\n    return this.createBookForm.get('book').value;\r\n  }\r\n  get description(): string {\r\n    return this.createBookForm.get('description').value;\r\n  }\r\n  get author(): string {\r\n    return this.createBookForm.get('author').value;\r\n  }\r\n  get category(): string {\r\n    return this.createBookForm.get('category').value;\r\n  }\r\n\r\n  public createOrUpdateBook(): void {\r\n    if (this.displayUpdate) {\r\n      this.newBook = {\r\n        book: this.book,\r\n        description: this.description,\r\n        author: this.author,\r\n        category: this.category,\r\n        id: this.existingBook.id,\r\n      };\r\n      this.store.dispatch(new UpdateBook(this.newBook));\r\n      this.store.dispatch(new GetBooks());\r\n      this.router.navigate(['/']);\r\n    } else {\r\n      this.newBook = {\r\n        book: this.book,\r\n        description: this.description,\r\n        author: this.author,\r\n        category: this.category,\r\n      };\r\n      this.store.dispatch(new AddBook(this.newBook));\r\n      this.store.dispatch(new GetBooks());\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-form {\r\n    border: 1px solid lightgrey;\r\n    border-radius: 2px;\r\n    padding: 0.5rem;\r\n    .h2 {\r\n        margin: 0.5rem;\r\n    }\r\n    .col25 {\r\n        width: 25%;\r\n        float: left;\r\n    }\r\n    .col75 {\r\n        width: 75%;\r\n        float: left;\r\n    }\r\n    .col50 {\r\n        width: 50%;\r\n        float: left;\r\n    }\r\n    input {\r\n        width: 90%;\r\n        margin: 0.5rem;\r\n        padding: 0.5rem;\r\n        border: 1px solid lightgrey;\r\n        border-radius: 3px;\r\n        ;\r\n    }\r\n    .form-row {\r\n        margin: 0.5rem;\r\n    }\r\n}",
                    "styleUrl": "./add-book.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "book": {
                    "name": "book",
                    "getSignature": {
                        "name": "book",
                        "type": "string",
                        "returnType": "string",
                        "line": 84
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "string",
                        "returnType": "string",
                        "line": 87
                    }
                },
                "author": {
                    "name": "author",
                    "getSignature": {
                        "name": "author",
                        "type": "string",
                        "returnType": "string",
                        "line": 90
                    }
                },
                "category": {
                    "name": "category",
                    "getSignature": {
                        "name": "category",
                        "type": "string",
                        "returnType": "string",
                        "line": 93
                    }
                }
            },
            "templateData": "<div class=\"create-form form-background\">\r\n    <ng-container *ngIf=\"!displayUpdate; else updateBook\">\r\n        <h2>Add new Book</h2>\r\n        <form [formGroup]=\"createBookForm\">\r\n            <div class=\"form-row\">\r\n                <div class=\"col50\">\r\n                    <label>Book name</label>\r\n                </div>\r\n                <div class=\"col50\">\r\n                    <input type=\"text\" aria-label=\"Enter book\" formControlName=\"book\">\r\n                </div>\r\n            </div>\r\n            <div class=\"form-row\">\r\n                <div class=\"col50\">\r\n                    <label>Book short description</label>\r\n                </div>\r\n                <div class=\"col50\">\r\n                    <input type=\"text\" aria-label=\"Enter Book short description\" formControlName=\"description\">\r\n                </div>\r\n            </div>\r\n            <div class=\"form-row\">\r\n                <div class=\"col50\">\r\n                    <label>Book author</label>\r\n                </div>\r\n                <div class=\"col50\">\r\n                    <input aria-label=\"Enter book author\" type=\"text\" formControlName=\"author\">\r\n                </div>\r\n            </div>\r\n            <div class=\"form-row\">\r\n                <div class=\"col50\">\r\n                    <label>Book category</label>\r\n                </div>\r\n                <div class=\"col50\">\r\n                    <input aria-label=\"Enter book category\" type=\"text\" formControlName=\"category\">\r\n                </div>\r\n            </div>\r\n        </form>\r\n        <button aria-label=\"Create the book\" (click)=\"createOrUpdateBook()\" class=\"secondary-button\">Create</button>\r\n    </ng-container>\r\n    <ng-template #updateBook>\r\n        <h2>Update Book</h2>\r\n        <form [formGroup]=\"createBookForm\">\r\n            <div class=\"form-row\">\r\n                <div class=\"col50\">\r\n                    <label>Book name</label>\r\n                </div>\r\n                <div class=\"col50\">\r\n                    <input aria-label=\"Enter book\" type=\"text\" formControlName=\"book\">\r\n                </div>\r\n            </div>\r\n            <div class=\"form-row\">\r\n                <div class=\"col50\">\r\n                    <label>Book short description</label>\r\n                </div>\r\n                <div class=\"col50\">\r\n                    <input aria-label=\"Enter book short description\" type=\"text\" formControlName=\"description\">\r\n                </div>\r\n            </div>\r\n            <div class=\"form-row\">\r\n                <div class=\"col50\">\r\n                    <label>Book author</label>\r\n                </div>\r\n                <div class=\"col50\">\r\n                    <input type=\"text\" aria-label=\"Enter book author\" formControlName=\"author\">\r\n                </div>\r\n            </div>\r\n            <div class=\"form-row\">\r\n                <div class=\"col50\">\r\n                    <label>Book category</label>\r\n                </div>\r\n                <div class=\"col50\">\r\n                    <input type=\"text\" aria-label=\"Enter book category\" formControlName=\"category\">\r\n                </div>\r\n            </div>\r\n        </form>\r\n        <button aria-label=\"Update book\" (click)=\"createOrUpdateBook()\" class=\"primary-button\">update Book</button>\r\n    </ng-template>\r\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-b9f18f2ee8797cead62b9ccbddd0363b-1",
            "file": "src/app/_components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isLoggedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "gotoLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "gotoSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { AppState, selectAuthState } from '../../store/app.state';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\nimport { Logout } from '../../store/actions/user.actions';\nimport { Book } from '../../_models';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  public isLoggedIn: boolean;\n  getState: Observable<any>;\n  isAuthenticated: false;\n  books: Book[];\n  user = null;\n  errorMessage = null;\n  isDarkTheme = false;\n\n  constructor(private authService: AuthService, \n              private store: Store<AppState>,\n              private router: Router) {\n                this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    //this.isLoggedIn = false;\n\n    this.getState.subscribe((state) => {\n      this.isAuthenticated = state.isAuthenticated;\n      this.user = state.user;\n      this.errorMessage = state.errorMessage;\n    });\n  }\n\n  public logout(): void {\n    this.store.dispatch(new Logout());\n  }\n\n  public gotoLogin(): void {\n    this.router.navigateByUrl('login');\n  }\n\n  public gotoSignUp(): void {\n    this.router.navigateByUrl('sign-up');\n  }\n  \n  toggleTheme(): void {\n    this.isDarkTheme = !this.isDarkTheme;\n  }\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fixed-header, .fixed-footer{\r\n    width: 100%;\r\n    position: fixed;        \r\n    background: dodgerblue;\r\n    padding: 10px 0;\r\n    color: #fff;\r\n}\r\n.fixed-header{\r\n    top: 0;\r\n}\r\n\r\n.fixed-footer{\r\n    bottom: 0;\r\n}\r\n\r\n.float-right{\r\n    float: right;\r\n    margin-right: 10px;\r\n}\r\n\r\n.text-padding {\r\n    padding-left: 10px;\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<!--<div class=\"fixed-header\">\n    <div class=\"container\">\n         <nav>\n            <a class=\"nav-item nav-link\" style=\"margin-left: 15px; color: #fff;\" routerLink=\"/users\"\n                routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact: true}\">Home</a>\n            <a class=\"nav-item nav-link\" style=\"margin-left: 15px; color: #fff;\" routerLink=\"/users\" routerLinkActive=\"active\">Books</a>\n            <a class=\"nav-item nav-link\" style=\"margin-right: 25px; float: right;\" routerLink=\"/account/login\"\n                *ngIf=\"!isLoggedIn\">Login {{isLoggedIn}}</a>\n            <a class=\"nav-item nav-link\" style=\"margin-right: 25px; float: right;\" (click)=\"logout()\"\n                *ngIf=\"isLoggedIn\">Logout</a>\n        </nav> -->\n\n\n        <div class=\"contain-all light-mode\" [ngClass]=\"isDarkTheme ? 'dark-mode' : 'light-mode'\">\n            <div class=\"fixed-header header-theme\">\n                <nav>\n                    <span class=\"text-padding\"> Books Collection App</span>\n        \n                    <button (click)=\"toggleTheme()\" class=\"float-right\">Toggle theme</button>\n        \n                    <div *ngIf=\"isAuthenticated; then userLoggedIn; else showLoginAndSignUp\" class=\"actions\"></div>\n        \n                    <ng-template #userLoggedIn>\n                        <a aria-label=\"Logout\" class=\"nav-item nav-link\"\n                            style=\"margin-right: 25px; float: right; cursor: pointer;\" (click)=\"logout()\">Logout</a>\n                        <span style=\"margin-left: 6em\">\n                            Hi. Welcome <em>{{ user.email }}!</em>\n                        </span>\n                    </ng-template>\n        \n                    <ng-template #showLoginAndSignUp>\n                        <a aria-label=\"Login\" class=\"nav-item nav-link\"\n                            style=\"margin-right: 25px; float: right; cursor: pointer;\" (click)=\"gotoLogin()\">Login</a>\n                        <a aria-label=\"Sign up\" class=\"nav-item nav-link\"\n                            style=\"margin-right: 25px; float: right; cursor: pointer;\" (click)=\"gotoSignUp()\">Sign up</a>\n                    </ng-template>\n                </nav>\n            </div>\n        </div>\n    <!-- </div>\n</div> -->\n\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-ef9ad824925855bfdbbd369df929a828",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "gotoLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "gotoSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Book } from '../_models';\r\nimport { Logout } from '../store/actions/user.actions';\r\nimport { AppState, selectAuthState } from '../store/app.state';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  getState: Observable<any>;\r\n  isAuthenticated: false;\r\n  books: Book[];\r\n  user = null;\r\n  errorMessage = null;\r\n  isDarkTheme = false;\r\n  // private router: Router\r\n  constructor(private store: Store<AppState>, private router: Router) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getState.subscribe((state) => {\r\n      this.isAuthenticated = state.isAuthenticated;\r\n      this.user = state.user;\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n  }\r\n\r\n  public logout(): void {\r\n    this.store.dispatch(new Logout());\r\n  }\r\n\r\n  public gotoLogin(): void {\r\n    this.router.navigateByUrl('login');\r\n  }\r\n\r\n  public gotoSignUp(): void {\r\n    this.router.navigateByUrl('sign-up');\r\n  }\r\n  toggleTheme(): void {\r\n    this.isDarkTheme = !this.isDarkTheme;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    padding: 1rem;\r\n    overflow: hidden;\r\n    .heading-title {\r\n        font-style: italic;\r\n        font-weight: bold;\r\n        font-size: 2rem;\r\n    }\r\n    .navigation {\r\n        display: contents;\r\n    }\r\n    .actions {\r\n        float: right;\r\n        padding: 1rem;\r\n        background-color: #9BC1BC;\r\n        border-radius: 0.5rem;\r\n        color: black;\r\n        text-decoration: none;\r\n    }\r\n    .login {\r\n        margin-left: 0.5rem;\r\n    }\r\n}\r\n\r\n.books-section {\r\n    margin-top: 3em;\r\n}\r\n\r\n.fixed-header, .fixed-footer{\r\n    width: 100%;\r\n    position: fixed;        \r\n    background: dodgerblue;\r\n    padding: 10px 0;\r\n    color: #fff;\r\n}\r\n.fixed-header{\r\n    top: 0;\r\n}\r\n.fixed-footer{\r\n    bottom: 0;\r\n}   \r\n\r\n.float-right{\r\n    float: right;\r\n    margin-right: 10px;\r\n}\r\n\r\n.text-padding {\r\n    padding-left: 10px;\r\n}",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"contain-all light-mode\" [ngClass]=\"isDarkTheme ? 'dark-mode' : 'light-mode'\">\r\n    <div>\r\n        \r\n        <div class=\"fixed-header header-theme\">\r\n                <nav>\r\n                    <span class=\"text-padding\"> Books Collection App</span>\r\n                    \r\n                    <button (click)=\"toggleTheme()\" class=\"float-right\">Toggle theme</button>\r\n                    \r\n                    <div *ngIf=\"isAuthenticated; then userLoggedIn; else showLoginAndSignUp\" class=\"actions\"></div>\r\n                    \r\n                    <ng-template #userLoggedIn>\r\n                        <a aria-label=\"Logout\" class=\"nav-item nav-link\" style=\"margin-right: 25px; float: right; cursor: pointer;\" (click)=\"logout()\">Logout</a>\r\n                        <span style=\"margin-left: 6em\">\r\n                             Hi. Welcome <em>{{ user.email }}!</em>\r\n                        </span>\r\n                    </ng-template>\r\n\r\n                    <ng-template #showLoginAndSignUp>\r\n                        <a aria-label=\"Login\" class=\"nav-item nav-link\" style=\"margin-right: 25px; float: right; cursor: pointer;\" (click)=\"gotoLogin()\" >Login</a>\r\n                        <a aria-label=\"Sign up\" class=\"nav-item nav-link\" style=\"margin-right: 25px; float: right; cursor: pointer;\" (click)=\"gotoSignUp()\">Sign up</a>\r\n                    </ng-template>\r\n                </nav>\r\n        </div>\r\n    </div> -->\r\n\r\n    <div class=\"books-section\">\r\n        <app-books-list [userAuthenticated]=\"isAuthenticated\"></app-books-list>\r\n    </div>\r\n<!-- </div> -->"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-5ecda2ce71766caa7506cd4dd6ba85ef",
            "file": "src/app/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayLogin",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginUser",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "signUpForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initializeSignUpForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "RegisterUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93
                },
                {
                    "name": "setLoginUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { User } from '../_models';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState, selectAuthState } from '../store/app.state';\r\nimport { SignUp, LogIn } from '../store/actions/user.actions';\r\nimport { Observable } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.scss'],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  public user: User;\r\n  public loginUser: User;\r\n  public signUpForm: FormGroup;\r\n  public loginForm: FormGroup;\r\n  public errorMessage: string;\r\n  getState: Observable<any>;\r\n  displayLogin: boolean;\r\n  constructor(private store: Store<AppState>, private route: ActivatedRoute) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeSignUpForm();\r\n    this.setUserData();\r\n    this.getState.subscribe((state) => {\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n    this.errorMessage = undefined;\r\n    this.route.data.subscribe((params) => {\r\n      if (params && params.isLogin) {\r\n        this.displayLogin = params.isLogin;\r\n      } else {\r\n        this.displayLogin = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeSignUpForm(): void {\r\n    this.signUpForm = new FormGroup({\r\n      name: new FormControl('', Validators.required),\r\n      email: new FormControl('', Validators.required),\r\n      password: new FormControl('', Validators.required),\r\n    });\r\n    this.loginForm = new FormGroup({\r\n      email: new FormControl('', Validators.required),\r\n      password: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n  private setUserData(): void {\r\n    this.user = {\r\n      email: this.email,\r\n      password: this.password,\r\n      name: this.name,\r\n    };\r\n  }\r\n  private setLoginUserData(): void {\r\n    this.loginUser = {\r\n      email: this.loginEmail,\r\n      password: this.loginPassword,\r\n    };\r\n  }\r\n  public signUp() {\r\n    this.setUserData();\r\n    this.store.dispatch(new SignUp(this.user));\r\n  }\r\n\r\n  public login(): void {\r\n    this.setLoginUserData();\r\n    this.store.dispatch(new LogIn(this.loginUser));\r\n  }\r\n\r\n  get name(): string {\r\n    return this.signUpForm.get('name').value;\r\n  }\r\n  get email(): string {\r\n    return this.signUpForm.get('email').value;\r\n  }\r\n  get password(): string {\r\n    return this.signUpForm.get('password').value;\r\n  }\r\n\r\n  get loginPassword(): string {\r\n    return this.loginForm.get('password').value;\r\n  }\r\n  get loginEmail(): string {\r\n    return this.loginForm.get('email').value;\r\n  }\r\n\r\n  RegisterUser(){\r\n    this.setUserData();\r\n    this.store.dispatch(new SignUp(this.user));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    width: 30%;\r\n    margin-left: 420px;\r\n    margin-top: 100px;\r\n}\r\n\r\n.form {\r\n   // display: grid;\r\n    grid-template-columns: [labels] auto [controls] 1fr;\r\n    grid-auto-flow: row;\r\n    grid-gap: .8em;\r\n    background: #eee;\r\n    padding: 1.2em;\r\n}\r\n\r\n.myForm > label  {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n}\r\n  \r\n.myForm > input {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.myForm > button {\r\n    grid-row: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.button {\r\n    margin: 8px;  \r\n    padding: 3px 10px 3px 10px;\r\n}\r\n\r\n.div-button {\r\n    background: dodgerblue;\r\n}\r\n\r\n*{  margin: 0; \r\n    padding: 0; \r\n    box-sizing: border-box; \r\n    text-align: center; \r\n    font-family: revert, \r\n    cursive;\r\n}\r\n\r\n.login {\r\n    background-color: dodgerblue;\r\n    padding: 11px;\r\n}\r\n\r\n.grid-container {\r\n    width: 30%;\r\n    margin-left: 420px;\r\n    margin-top: 100px;\r\n}\r\n\r\n.form {\r\n   // display: grid;\r\n    grid-template-columns: [labels] auto [controls] 1fr;\r\n    grid-auto-flow: row;\r\n    grid-gap: .8em;\r\n    background: #eee;\r\n    padding: 1.2em;\r\n}\r\n\r\n.myForm > label  {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n}\r\n  \r\n.myForm > input {\r\n    grid-column: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.myForm > button {\r\n    grid-row: controls;\r\n    grid-row: auto;\r\n    border: none;\r\n    padding: 1em;\r\n}\r\n\r\n.button {\r\n    margin: 8px;  \r\n    padding: 3px 10px 3px 10px;\r\n}\r\n\r\n.div-button {\r\n    background: dodgerblue;\r\n    text-align: center; \r\n    padding: 8px;\r\n}\r\n\r\n*{  margin: 0; \r\n    padding: 0; \r\n    box-sizing: border-box; \r\n    text-align: center; \r\n    font-family: revert, \r\n    cursive;\r\n}\r\n\r\n.login {\r\n    background-color: dodgerblue;\r\n    padding: 11px;\r\n}\r\n\r\n.top-margin {\r\n    margin-top: 1em;\r\n}\r\n\r\n.left-margin {\r\n    margin-left: 1em;\r\n}",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 76
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "string",
                        "returnType": "string",
                        "line": 79
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "string",
                        "returnType": "string",
                        "line": 82
                    }
                },
                "loginPassword": {
                    "name": "loginPassword",
                    "getSignature": {
                        "name": "loginPassword",
                        "type": "string",
                        "returnType": "string",
                        "line": 86
                    }
                },
                "loginEmail": {
                    "name": "loginEmail",
                    "getSignature": {
                        "name": "loginEmail",
                        "type": "string",
                        "returnType": "string",
                        "line": 89
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"displayLogin; else signUp\">\r\n    <div class=\"grid-container\">\r\n        <div class=\"login\">\r\n            Login\r\n        </div>\r\n        <div *ngIf=\"errorMessage\">\r\n            <div class=\"alert alert-danger\">\r\n                {{errorMessage}}\r\n            </div>\r\n        </div>\r\n\r\n        <div>\r\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"form\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"email\">Username</label>\r\n                    <input type=\"email\" placeholder=\"Enter Username\" name=\"email\" required autocomplete=\"off\"\r\n                        formControlName=\"email\" class=\"form-control left-margin\"\r\n                        [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\">\r\n                    <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.email.errors.required\">Username is required</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"form-group top-margin\">\r\n                    <label for=\"password\">Password</label>\r\n                    <input type=\"password\" placeholder=\"Enter Password\" name=\"password\" required autocomplete=\"off\"\r\n                        formControlName=\"password\" class=\"form-control left-margin\"\r\n                        [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\">\r\n                    <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <div class=\"div-button\">\r\n            <button aria-label=\"Login\" type=\"button\" (click)=\"login()\">Login</button>\r\n            <button aria-label=\"Register\" type=\"button\" routerLink=\"../sign-up\"\r\n                class=\"btn btn-link left-margin\">Register</button>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #signUp>\r\n    <div>\r\n        <div class=\"grid-container\">\r\n            <div class=\"login\">\r\n                Register\r\n            </div>\r\n            <div>\r\n                <form [formGroup]=\"signUpForm\" class=\"form\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"name\">Name</label>\r\n                        <input type=\"text\" placeholder=\"Name\" formControlName=\"name\" class=\"form-control left-margin\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.name.errors }\" />\r\n                        <div *ngIf=\"submitted && f.name.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.name.errors.required\">Name is required</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group top-margin\">\r\n                        <label for=\"email\">Username</label>\r\n                        <input type=\"text\" placeholder=\"Username\" formControlName=\"email\"\r\n                            class=\"form-control left-margin\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n                        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.email.errors.required\">Username is required</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group top-margin\">\r\n                        <label for=\"password\">Password</label>\r\n                        <input type=\"password\" placeholder=\"Password\" formControlName=\"password\"\r\n                            class=\"form-control left-margin\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div class=\"div-button\">\r\n                <button aria-label=\"Register\" (click)=\"RegisterUser()\" type=\"button\"\r\n                    [disabled]=\"signUpForm.invalid\">Register</button>\r\n                <button aria-label=\"Cancel\" type=\"button\" routerLink=\"../home\"\r\n                    class=\"btn btn-link left-margin\">Cancel</button>\r\n            </div>\r\n        </div>\r\n\r\n        <span>{{errorMessage}}</span>\r\n    </div>\r\n</ng-template>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BooksListComponent"
                        },
                        {
                            "name": "CreateBookComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_BOOK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-store/actions/book.actions.ts",
                "type": "string",
                "defaultValue": "'[Book] ADD'"
            },
            {
                "name": "ADD_BOOK_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-store/actions/book.actions.ts",
                "type": "string",
                "defaultValue": "'[Book] ADD Book SUCCESS'"
            },
            {
                "name": "bookState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('book')"
            },
            {
                "name": "DATA_LOAD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-store/actions/book.actions.ts",
                "type": "string",
                "defaultValue": "'[Book] LOAD'"
            },
            {
                "name": "DELETE_BOOK_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-store/actions/book.actions.ts",
                "type": "string",
                "defaultValue": "'[Book] DELETE Book SUCCESS'"
            },
            {
                "name": "DELETE_BOOKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-store/actions/book.actions.ts",
                "type": "string",
                "defaultValue": "'[Book] DELETE'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'http://localhost:3000/'\r\n}"
            },
            {
                "name": "GET_BOOKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-store/actions/book.actions.ts",
                "type": "string",
                "defaultValue": "'[Book] GET'"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-store/reducers/book.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  book: [],\r\n  message: null,\r\n  success: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n    isAuthenticated: false,\r\n    user: null,\r\n    errorMessage: null\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/sign-up.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "productList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/sign-up.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "object",
                "defaultValue": "{\r\n    auth: auth.reducer,\r\n    book: book.reducer\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "SignIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/sign-up.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Signup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/sign-up.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/sign-up.stories.ts",
                "type": "Story<SignUpComponent>",
                "defaultValue": "(args: SignUpComponent) => ({\r\n    component: SignUpComponent,\r\n    props: args,\r\n})"
            },
            {
                "name": "UPDATE_BOOK_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-store/actions/book.actions.ts",
                "type": "string",
                "defaultValue": "'[Book] UPDATE Book SUCCESS'"
            },
            {
                "name": "UPDATE_BOOKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-store/actions/book.actions.ts",
                "type": "string",
                "defaultValue": "'[Book] UPDATE'"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/book-store/reducers/book.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | Logout",
                "file": "src/app/store/actions/user.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "BookActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess | UpdateBookSuccess | DeleteBookSuccess",
                "file": "src/app/book-store/actions/book.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[AUTH] LogIn"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[AUTH] SignUp"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[AUTH] LogOut"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] SignUp Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] SignUp Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/user.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/book-store/actions/book.actions.ts": [
                {
                    "name": "ADD_BOOK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-store/actions/book.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Book] ADD'"
                },
                {
                    "name": "ADD_BOOK_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-store/actions/book.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Book] ADD Book SUCCESS'"
                },
                {
                    "name": "DATA_LOAD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-store/actions/book.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Book] LOAD'"
                },
                {
                    "name": "DELETE_BOOK_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-store/actions/book.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Book] DELETE Book SUCCESS'"
                },
                {
                    "name": "DELETE_BOOKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-store/actions/book.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Book] DELETE'"
                },
                {
                    "name": "GET_BOOKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-store/actions/book.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Book] GET'"
                },
                {
                    "name": "UPDATE_BOOK_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-store/actions/book.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Book] UPDATE Book SUCCESS'"
                },
                {
                    "name": "UPDATE_BOOKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-store/actions/book.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Book] UPDATE'"
                }
            ],
            "src/app/store/app.state.ts": [
                {
                    "name": "bookState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('book')"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    auth: auth.reducer,\r\n    book: book.reducer\r\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'http://localhost:3000/'\r\n}"
                }
            ],
            "src/app/book-store/reducers/book.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-store/reducers/book.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  book: [],\r\n  message: null,\r\n  success: null\r\n}"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n    isAuthenticated: false,\r\n    user: null,\r\n    errorMessage: null\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/sign-up/sign-up.stories.ts": [
                {
                    "name": "Logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/sign-up.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "productList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/sign-up.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SignIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/sign-up.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Signup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/sign-up.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/sign-up.stories.ts",
                    "type": "Story<SignUpComponent>",
                    "defaultValue": "(args: SignUpComponent) => ({\r\n    component: SignUpComponent,\r\n    props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/book-store/reducers/book.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/book-store/reducers/book.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/user.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[AUTH] LogIn"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[AUTH] SignUp"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[AUTH] LogOut"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] SignUp Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] SignUp Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/user.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/user.actions.ts": [
                {
                    "name": "AuthAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | Logout",
                    "file": "src/app/store/actions/user.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/book-store/actions/book.actions.ts": [
                {
                    "name": "BookActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AddBook | GetBooks | DeleteBooks | UpdateBook | LoadDataSuccess | AddBookSuccess | UpdateBookSuccess | DeleteBookSuccess",
                    "file": "src/app/book-store/actions/book.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "SignUpComponent",
                        "data": {
                            "isLogin": true
                        }
                    },
                    {
                        "path": "sign-up",
                        "component": "SignUpComponent"
                    },
                    {
                        "path": "create",
                        "component": "CreateBookComponent"
                    },
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "update/:id",
                        "component": "CreateBookComponent",
                        "data": {
                            "isUpdate": true
                        }
                    },
                    {
                        "path": "",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": "/"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/Book.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Book",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/add-book/add-book.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateBookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddBook",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddBookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteBooks",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteBookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetBooks",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateBook",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateBookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_BOOK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_BOOK_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_LOAD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_BOOK_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_BOOKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_BOOKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_BOOK_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/actions/book.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_BOOKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/book.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BookState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/effects/book.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BookEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/reducers/book.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/reducers/book.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-store/reducers/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books-list/books-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/books.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BooksService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SignIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Signup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Logout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}